// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  emailVerified      DateTime? // Added for NextAuth compatibility
  name               String?
  username           String?   @unique
  image              String?
  instagramId        String?
  gender             Gender?
  ageGroup           AgeGroup?
  bio                String?   @db.Text
  country            String?   @default("India")
  countryCode        String?   @default("IN")
  googleDomain       String?   @default("google.co.in")
  currency           String?   @default("INR")
  isPublic           Boolean   @default(true)
  requestCount       Int       @default(0)
  isPremium          Boolean   @default(false)
  accounts           Account[]
  sessions           Session[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  followers          Follow[]  @relation("UserFollowers")
  following          Follow[]  @relation("UserFollowing")
  chats              Chat[]
  queries            UserQuery[]
  
  // Style preferences
  aesthetics         UserAesthetic[]
  sizes              UserSize[]
  hasCompletedOnboarding Boolean @default(false)
}


model UserQuery {
  id        Int      @id @default(autoincrement())
  userId    String?
  queryText String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New models for style preferences

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum AgeGroup {
  UNDER_18
  AGE_18_24
  AGE_25_34
  AGE_35_44
  AGE_45_54
  AGE_55_PLUS
  PREFER_NOT_TO_SAY
}

model UserAesthetic {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aesthetic String
  createdAt DateTime @default(now())

  @@unique([userId, aesthetic])
}

enum SizeCategory {
  TOPS
  BOTTOMS
  SHOES
  OUTERWEAR
  DRESSES
}

model UserSize {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  SizeCategory
  size      String
  createdAt DateTime    @default(now())

  @@unique([userId, category, size])
}
// New models for chat functionality

model Chat {
  id          String      @id @default(cuid())
  userId      String
  title       String?     @default("New Chat")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@index([userId])
}

model Message {
  id          String      @id @default(cuid())
  chatId      String
  text        String      @db.Text
  role        MessageRole
  createdAt   DateTime    @default(now())
  chat        Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  products    Product[]   @relation("RerankedProducts")
  originalProducts Product[] @relation("OriginalProducts")

  @@index([chatId])
}

enum MessageRole {
  USER
  ASSISTANT
}

model Product {
  id                String    @id @default(cuid())
  title             String
  link              String
  source            String?
  price             String
  rating            String?
  reviews           String?
  thumbnail         String?
  store             String?
  score             Float?
  createdAt         DateTime  @default(now())
  
  // Relations to Message model
  messageReranked   Message?  @relation("RerankedProducts", fields: [messageRerankedId], references: [id])
  messageRerankedId String?
  
  messageOriginal   Message?  @relation("OriginalProducts", fields: [messageOriginalId], references: [id])
  messageOriginalId String?

  @@index([messageRerankedId])
  @@index([messageOriginalId])
}